{"ast":null,"code":"var _jsxFileName = \"/Users/liaihu/project/starlink/src/components/WorldMap.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n\n    this.track = data => {\n      if (!data[0].hasOwnProperty(\"positions\")) {\n        throw new Error(\"no position data\");\n      }\n\n      const len = data[0].positions.length;\n      const {\n        context2\n      } = this.map;\n      let now = new Date();\n      let i = 0;\n      let timer = setInterval(() => {\n        let ct = new Date();\n        let timePassed = i === 0 ? 0 : ct - now;\n        let time = new Date(now.getTime() + 60 * timePassed);\n        context2.clearRect(0, 0, width, height);\n        context2.font = \"bold 14px sans-serif\";\n        context2.fillStyle = \"#333\";\n        context2.textAlign = \"center\";\n        context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n        if (i >= len) {\n          clearInterval(timer);\n          this.setState({\n            isDrawing: false\n          });\n          const oHint = document.getElementsByClassName(\"hint\")[0];\n          oHint.innerHTML = \"\";\n          return;\n        }\n\n        data.forEach(sat => {\n          const {\n            info,\n            positions\n          } = sat;\n          this.drawSat(info, positions[i]);\n        });\n        i += 60;\n      }, 1000);\n    };\n\n    this.drawSat = (sat, pos) => {\n      const {\n        satlongitude,\n        satlatitude\n      } = pos;\n      if (!satlongitude || !satlatitude) return;\n      const {\n        satname\n      } = sat;\n      const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n      const {\n        projection,\n        context2\n      } = this.map;\n      const xy = projection([satlongitude, satlatitude]);\n      context2.fillStyle = this.color(nameWithNumber);\n      context2.beginPath();\n      context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n      context2.fill();\n      context2.font = \"bold 11px sans-serif\";\n      context2.textAlign = \"center\";\n      context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    this.generateMap = land => {\n      const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(0.1);\n      const graticule = geoGraticule();\n      const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height);\n      const canvas2 = d3Select(this.refTrack.current).attr(\"width\", width).attr(\"height\", height);\n      const context = canvas.node().getContext(\"2d\");\n      const context2 = canvas2.node().getContext(\"2d\");\n      let path = geoPath().projection(projection).context(context);\n      land.forEach(ele => {\n        context.fillStyle = \"#B3DDEF\";\n        context.strokeStyle = \"#000\";\n        context.globalAlpha = 0.7;\n        context.beginPath();\n        path(ele);\n        context.fill();\n        context.stroke();\n        context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n        context.beginPath();\n        path(graticule());\n        context.lineWidth = 0.1;\n        context.stroke();\n        context.beginPath();\n        context.lineWidth = 0.5;\n        path(graticule.outline());\n        context.stroke();\n      });\n      this.map = {\n        projection: projection,\n        graticule: graticule,\n        context: context,\n        context2: context2\n      };\n    };\n\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = /*#__PURE__*/React.createRef();\n    this.refTrack = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => {\n      console.log(\"err in fetch map data \", e.message);\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.satData !== this.props.satData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60;\n      this.setState({\n        isLoading: true\n      });\n      const urls = this.props.satData.map(sat => {\n        const {\n          satid\n        } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return axios.get(url);\n      });\n      Promise.all(urls).then(res => {\n        const arr = res.map(sat => sat.data);\n        this.setState({\n          isLoading: false,\n          isDrawing: true\n        });\n\n        if (!prevState.isDrawing) {\n          this.track(arr);\n        } else {\n          const oHint = document.getElementsByClassName(\"hint\")[0];\n          oHint.innerHTML = \"Please wait for these satellite animation to finish before selection new ones!\";\n        }\n      }).catch(e => {\n        console.log(\"err in fetch satellite position -> \", e.message);\n      });\n    }\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\",\n        children: /*#__PURE__*/_jsxDEV(Spin, {\n          tip: \"Loading...\",\n          size: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\",\n        ref: this.refMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"track\",\n        ref: this.refTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"sources":["/Users/liaihu/project/starlink/src/components/WorldMap.js"],"names":["React","Component","axios","Spin","feature","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","schemeCategory10","d3Scale","timeFormat","d3TimeFormat","WORLD_MAP_URL","SATELLITE_POSITION_URL","SAT_API_KEY","width","height","WorldMap","constructor","track","data","hasOwnProperty","Error","len","positions","length","context2","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","textAlign","fillText","clearInterval","setState","isDrawing","oHint","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","satname","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","scale","translate","precision","graticule","canvas","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","state","isLoading","scaleOrdinal","createRef","componentDidMount","get","then","res","objects","countries","features","catch","e","console","log","message","componentDidUpdate","prevProps","prevState","satData","props","latitude","longitude","elevation","duration","observerData","endTime","urls","satid","url","Promise","all","arr","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,YAAT,EAAuBC,OAAvB,QAAsC,QAAtC;AACA,SAASC,MAAM,IAAIC,QAAnB,QAAmC,cAAnC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,SAASC,UAAU,IAAIC,YAAvB,QAA2C,gBAA3C;AAEA,SACEC,aADF,EAEEC,sBAFF,EAGEC,WAHF,QAIO,cAJP;;AAMA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,MAAM,GAAG,GAAf;;AAEA,MAAMC,QAAN,SAAuBlB,SAAvB,CAAiC;AAC/BmB,EAAAA,WAAW,GAAG;AACZ;;AADY,SAgEdC,KAhEc,GAgELC,IAAD,IAAU;AAChB,UAAI,CAACA,IAAI,CAAC,CAAD,CAAJ,CAAQC,cAAR,CAAuB,WAAvB,CAAL,EAA0C;AACxC,cAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,YAAMC,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,SAAR,CAAkBC,MAA9B;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKC,GAA1B;AAEA,UAAIC,GAAG,GAAG,IAAIC,IAAJ,EAAV;AAEA,UAAIC,CAAC,GAAG,CAAR;AAEA,UAAIC,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC5B,YAAIC,EAAE,GAAG,IAAIJ,IAAJ,EAAT;AAEA,YAAIK,UAAU,GAAGJ,CAAC,KAAK,CAAN,GAAU,CAAV,GAAcG,EAAE,GAAGL,GAApC;AACA,YAAIO,IAAI,GAAG,IAAIN,IAAJ,CAASD,GAAG,CAACQ,OAAJ,KAAgB,KAAKF,UAA9B,CAAX;AAEAR,QAAAA,QAAQ,CAACW,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBtB,KAAzB,EAAgCC,MAAhC;AAEAU,QAAAA,QAAQ,CAACY,IAAT,GAAgB,sBAAhB;AACAZ,QAAAA,QAAQ,CAACa,SAAT,GAAqB,MAArB;AACAb,QAAAA,QAAQ,CAACc,SAAT,GAAqB,QAArB;AACAd,QAAAA,QAAQ,CAACe,QAAT,CAAkB9B,YAAY,CAACwB,IAAD,CAA9B,EAAsCpB,KAAK,GAAG,CAA9C,EAAiD,EAAjD;;AAEA,YAAIe,CAAC,IAAIP,GAAT,EAAc;AACZmB,UAAAA,aAAa,CAACX,KAAD,CAAb;AACA,eAAKY,QAAL,CAAc;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAAd;AACA,gBAAMC,KAAK,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,MAAhC,EAAwC,CAAxC,CAAd;AACAF,UAAAA,KAAK,CAACG,SAAN,GAAkB,EAAlB;AACA;AACD;;AAED5B,QAAAA,IAAI,CAAC6B,OAAL,CAAcC,GAAD,IAAS;AACpB,gBAAM;AAAEC,YAAAA,IAAF;AAAQ3B,YAAAA;AAAR,cAAsB0B,GAA5B;AACA,eAAKE,OAAL,CAAaD,IAAb,EAAmB3B,SAAS,CAACM,CAAD,CAA5B;AACD,SAHD;AAKAA,QAAAA,CAAC,IAAI,EAAL;AACD,OA3BsB,EA2BpB,IA3BoB,CAAvB;AA4BD,KAxGa;;AAAA,SA0GdsB,OA1Gc,GA0GJ,CAACF,GAAD,EAAMG,GAAN,KAAc;AACtB,YAAM;AAAEC,QAAAA,YAAF;AAAgBC,QAAAA;AAAhB,UAAgCF,GAAtC;AAEA,UAAI,CAACC,YAAD,IAAiB,CAACC,WAAtB,EAAmC;AAEnC,YAAM;AAAEC,QAAAA;AAAF,UAAcN,GAApB;AACA,YAAMO,cAAc,GAAGD,OAAO,CAACE,KAAR,CAAc,MAAd,EAAsBC,IAAtB,CAA2B,EAA3B,CAAvB;AAEA,YAAM;AAAEC,QAAAA,UAAF;AAAclC,QAAAA;AAAd,UAA2B,KAAKC,GAAtC;AACA,YAAMkC,EAAE,GAAGD,UAAU,CAAC,CAACN,YAAD,EAAeC,WAAf,CAAD,CAArB;AAEA7B,MAAAA,QAAQ,CAACa,SAAT,GAAqB,KAAKuB,KAAL,CAAWL,cAAX,CAArB;AACA/B,MAAAA,QAAQ,CAACqC,SAAT;AACArC,MAAAA,QAAQ,CAACsC,GAAT,CAAaH,EAAE,CAAC,CAAD,CAAf,EAAoBA,EAAE,CAAC,CAAD,CAAtB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,IAAII,IAAI,CAACC,EAA1C;AACAxC,MAAAA,QAAQ,CAACyC,IAAT;AAEAzC,MAAAA,QAAQ,CAACY,IAAT,GAAgB,sBAAhB;AACAZ,MAAAA,QAAQ,CAACc,SAAT,GAAqB,QAArB;AACAd,MAAAA,QAAQ,CAACe,QAAT,CAAkBgB,cAAlB,EAAkCI,EAAE,CAAC,CAAD,CAApC,EAAyCA,EAAE,CAAC,CAAD,CAAF,GAAQ,EAAjD;AACD,KA7Ha;;AAAA,SA+IdO,WA/Ic,GA+ICC,IAAD,IAAU;AACtB,YAAMT,UAAU,GAAGzD,cAAc,GAC9BmE,KADgB,CACV,GADU,EAEhBC,SAFgB,CAEN,CAACxD,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CAFM,EAGhBwD,SAHgB,CAGN,GAHM,CAAnB;AAKA,YAAMC,SAAS,GAAGrE,YAAY,EAA9B;AAEA,YAAMsE,MAAM,GAAGnE,QAAQ,CAAC,KAAKoE,MAAL,CAAYC,OAAb,CAAR,CACZC,IADY,CACP,OADO,EACE9D,KADF,EAEZ8D,IAFY,CAEP,QAFO,EAEG7D,MAFH,CAAf;AAIA,YAAM8D,OAAO,GAAGvE,QAAQ,CAAC,KAAKwE,QAAL,CAAcH,OAAf,CAAR,CACbC,IADa,CACR,OADQ,EACC9D,KADD,EAEb8D,IAFa,CAER,QAFQ,EAEE7D,MAFF,CAAhB;AAIA,YAAMgE,OAAO,GAAGN,MAAM,CAACO,IAAP,GAAcC,UAAd,CAAyB,IAAzB,CAAhB;AACA,YAAMxD,QAAQ,GAAGoD,OAAO,CAACG,IAAR,GAAeC,UAAf,CAA0B,IAA1B,CAAjB;AAEA,UAAIC,IAAI,GAAG9E,OAAO,GAAGuD,UAAV,CAAqBA,UAArB,EAAiCoB,OAAjC,CAAyCA,OAAzC,CAAX;AAEAX,MAAAA,IAAI,CAACpB,OAAL,CAAcmC,GAAD,IAAS;AACpBJ,QAAAA,OAAO,CAACzC,SAAR,GAAoB,SAApB;AACAyC,QAAAA,OAAO,CAACK,WAAR,GAAsB,MAAtB;AACAL,QAAAA,OAAO,CAACM,WAAR,GAAsB,GAAtB;AACAN,QAAAA,OAAO,CAACjB,SAAR;AACAoB,QAAAA,IAAI,CAACC,GAAD,CAAJ;AACAJ,QAAAA,OAAO,CAACb,IAAR;AACAa,QAAAA,OAAO,CAACO,MAAR;AAEAP,QAAAA,OAAO,CAACK,WAAR,GAAsB,0BAAtB;AACAL,QAAAA,OAAO,CAACjB,SAAR;AACAoB,QAAAA,IAAI,CAACV,SAAS,EAAV,CAAJ;AACAO,QAAAA,OAAO,CAACQ,SAAR,GAAoB,GAApB;AACAR,QAAAA,OAAO,CAACO,MAAR;AAEAP,QAAAA,OAAO,CAACjB,SAAR;AACAiB,QAAAA,OAAO,CAACQ,SAAR,GAAoB,GAApB;AACAL,QAAAA,IAAI,CAACV,SAAS,CAACgB,OAAV,EAAD,CAAJ;AACAT,QAAAA,OAAO,CAACO,MAAR;AACD,OAnBD;AAqBA,WAAK5D,GAAL,GAAW;AACTiC,QAAAA,UAAU,EAAEA,UADH;AAETa,QAAAA,SAAS,EAAEA,SAFF;AAGTO,QAAAA,OAAO,EAAEA,OAHA;AAITtD,QAAAA,QAAQ,EAAEA;AAJD,OAAX;AAMD,KA/La;;AAEZ,SAAKgE,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KADA;AAEX/C,MAAAA,SAAS,EAAE;AAFA,KAAb;AAIA,SAAKjB,GAAL,GAAW,IAAX;AACA,SAAKmC,KAAL,GAAarD,OAAO,CAACmF,YAAR,CAAqBpF,gBAArB,CAAb;AACA,SAAKmE,MAAL,gBAAc7E,KAAK,CAAC+F,SAAN,EAAd;AACA,SAAKd,QAAL,gBAAgBjF,KAAK,CAAC+F,SAAN,EAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB9F,IAAAA,KAAK,CACF+F,GADH,CACOnF,aADP,EAEGoF,IAFH,CAESC,GAAD,IAAS;AACb,YAAM;AAAE7E,QAAAA;AAAF,UAAW6E,GAAjB;AACA,YAAM5B,IAAI,GAAGnE,OAAO,CAACkB,IAAD,EAAOA,IAAI,CAAC8E,OAAL,CAAaC,SAApB,CAAP,CAAsCC,QAAnD;AACA,WAAKhC,WAAL,CAAiBC,IAAjB;AACD,KANH,EAOGgC,KAPH,CAOUC,CAAD,IAAO;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,CAAC,CAACG,OAAxC;AACD,KATH;AAUD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,QAAID,SAAS,CAACE,OAAV,KAAsB,KAAKC,KAAL,CAAWD,OAArC,EAA8C;AAC5C,YAAM;AAAEE,QAAAA,QAAF;AAAYC,QAAAA,SAAZ;AAAuBC,QAAAA,SAAvB;AAAkCC,QAAAA;AAAlC,UACJ,KAAKJ,KAAL,CAAWK,YADb;AAEA,YAAMC,OAAO,GAAGF,QAAQ,GAAG,EAA3B;AAEA,WAAKvE,QAAL,CAAc;AACZgD,QAAAA,SAAS,EAAE;AADC,OAAd;AAIA,YAAM0B,IAAI,GAAG,KAAKP,KAAL,CAAWD,OAAX,CAAmBlF,GAAnB,CAAwBuB,GAAD,IAAS;AAC3C,cAAM;AAAEoE,UAAAA;AAAF,YAAYpE,GAAlB;AACA,cAAMqE,GAAG,GAAI,QAAO1G,sBAAuB,IAAGyG,KAAM,IAAGP,QAAS,IAAGC,SAAU,IAAGC,SAAU,IAAGG,OAAQ,YAAWtG,WAAY,EAA5H;AAEA,eAAOd,KAAK,CAAC+F,GAAN,CAAUwB,GAAV,CAAP;AACD,OALY,CAAb;AAOAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EACGrB,IADH,CACSC,GAAD,IAAS;AACb,cAAMyB,GAAG,GAAGzB,GAAG,CAACtE,GAAJ,CAASuB,GAAD,IAASA,GAAG,CAAC9B,IAArB,CAAZ;AACA,aAAKuB,QAAL,CAAc;AACZgD,UAAAA,SAAS,EAAE,KADC;AAEZ/C,UAAAA,SAAS,EAAE;AAFC,SAAd;;AAKA,YAAI,CAACgE,SAAS,CAAChE,SAAf,EAA0B;AACxB,eAAKzB,KAAL,CAAWuG,GAAX;AACD,SAFD,MAEO;AACL,gBAAM7E,KAAK,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,MAAhC,EAAwC,CAAxC,CAAd;AACAF,UAAAA,KAAK,CAACG,SAAN,GACE,gFADF;AAED;AACF,OAfH,EAgBGqD,KAhBH,CAgBUC,CAAD,IAAO;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDF,CAAC,CAACG,OAArD;AACD,OAlBH;AAmBD;AACF;;AAiEDkB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhC,MAAAA;AAAF,QAAgB,KAAKD,KAA3B;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,iBACGC,SAAS,gBACR;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,GAAG,EAAC,YAAV;AAAuB,UAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADQ,GAIN,IALN,eAME;AAAQ,QAAA,SAAS,EAAC,KAAlB;AAAwB,QAAA,GAAG,EAAE,KAAKhB;AAAlC;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAQ,QAAA,SAAS,EAAC,OAAlB;AAA0B,QAAA,GAAG,EAAE,KAAKI;AAApC;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AA9I8B;;AAmMjC,eAAe9D,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n  WORLD_MAP_URL,\n  SATELLITE_POSITION_URL,\n  SAT_API_KEY,\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      isDrawing: false,\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    axios\n      .get(WORLD_MAP_URL)\n      .then((res) => {\n        const { data } = res;\n        const land = feature(data, data.objects.countries).features;\n        this.generateMap(land);\n      })\n      .catch((e) => {\n        console.log(\"err in fetch map data \", e.message);\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.satData !== this.props.satData) {\n      const { latitude, longitude, elevation, duration } =\n        this.props.observerData;\n      const endTime = duration * 60;\n\n      this.setState({\n        isLoading: true,\n      });\n\n      const urls = this.props.satData.map((sat) => {\n        const { satid } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n        return axios.get(url);\n      });\n\n      Promise.all(urls)\n        .then((res) => {\n          const arr = res.map((sat) => sat.data);\n          this.setState({\n            isLoading: false,\n            isDrawing: true,\n          });\n\n          if (!prevState.isDrawing) {\n            this.track(arr);\n          } else {\n            const oHint = document.getElementsByClassName(\"hint\")[0];\n            oHint.innerHTML =\n              \"Please wait for these satellite animation to finish before selection new ones!\";\n          }\n        })\n        .catch((e) => {\n          console.log(\"err in fetch satellite position -> \", e.message);\n        });\n    }\n  }\n\n  track = (data) => {\n    if (!data[0].hasOwnProperty(\"positions\")) {\n      throw new Error(\"no position data\");\n    }\n\n    const len = data[0].positions.length;\n    const { context2 } = this.map;\n\n    let now = new Date();\n\n    let i = 0;\n\n    let timer = setInterval(() => {\n      let ct = new Date();\n\n      let timePassed = i === 0 ? 0 : ct - now;\n      let time = new Date(now.getTime() + 60 * timePassed);\n\n      context2.clearRect(0, 0, width, height);\n\n      context2.font = \"bold 14px sans-serif\";\n      context2.fillStyle = \"#333\";\n      context2.textAlign = \"center\";\n      context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n      if (i >= len) {\n        clearInterval(timer);\n        this.setState({ isDrawing: false });\n        const oHint = document.getElementsByClassName(\"hint\")[0];\n        oHint.innerHTML = \"\";\n        return;\n      }\n\n      data.forEach((sat) => {\n        const { info, positions } = sat;\n        this.drawSat(info, positions[i]);\n      });\n\n      i += 60;\n    }, 1000);\n  };\n\n  drawSat = (sat, pos) => {\n    const { satlongitude, satlatitude } = pos;\n\n    if (!satlongitude || !satlatitude) return;\n\n    const { satname } = sat;\n    const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n    const { projection, context2 } = this.map;\n    const xy = projection([satlongitude, satlatitude]);\n\n    context2.fillStyle = this.color(nameWithNumber);\n    context2.beginPath();\n    context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n    context2.fill();\n\n    context2.font = \"bold 11px sans-serif\";\n    context2.textAlign = \"center\";\n    context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <div className=\"map-box\">\n        {isLoading ? (\n          <div className=\"spinner\">\n            <Spin tip=\"Loading...\" size=\"large\" />\n          </div>\n        ) : null}\n        <canvas className=\"map\" ref={this.refMap} />\n        <canvas className=\"track\" ref={this.refTrack} />\n        <div className=\"hint\" />\n      </div>\n    );\n  }\n\n  generateMap = (land) => {\n    const projection = geoKavrayskiy7()\n      .scale(170)\n      .translate([width / 2, height / 2])\n      .precision(0.1);\n\n    const graticule = geoGraticule();\n\n    const canvas = d3Select(this.refMap.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const canvas2 = d3Select(this.refTrack.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const context = canvas.node().getContext(\"2d\");\n    const context2 = canvas2.node().getContext(\"2d\");\n\n    let path = geoPath().projection(projection).context(context);\n\n    land.forEach((ele) => {\n      context.fillStyle = \"#B3DDEF\";\n      context.strokeStyle = \"#000\";\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n\n      context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context2,\n    };\n  };\n}\n\nexport default WorldMap;"]},"metadata":{},"sourceType":"module"}